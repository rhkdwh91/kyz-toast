{"version":3,"file":"kyz-toast.cjs.production.min.js","sources":["../src/components/Icons/Success.tsx","../src/components/Icons/Close.tsx","../src/components/Icons/Info.tsx","../src/components/Icons/Warning.tsx","../src/components/Toast/Toast.tsx","../src/components/Toast/ToastIcon.tsx","../src/hooks/useToast.ts","../src/types/types.ts","../src/utils/emitter.ts","../src/utils/toastDispatcher.ts","../src/toast.ts","../src/utils/toaster.ts","../src/ToastContainer.tsx"],"sourcesContent":["import React from 'react'\n\nconst Success = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n      <g transform=\"translate(.077 .077)\">\n        <g>\n          <path\n            fill=\"none\"\n            stroke=\"#fff\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"1.5\"\n            d=\"M3.719 7.884L6.235 10.4l3.032-3.032 2.774-2.774\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  )\n}\n\nexport default React.memo(Success)","import React from 'react'\n\nconst Close = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n      <g transform=\"translate(.077 .077)\">\n        <g>\n          <path\n            fill=\"#fff\"\n            d=\"M10.915 9.98l2.853-2.846a.666.666 0 00-.942-.942L9.979 9.044 7.133 6.191a.666.666 0 00-.942.942L9.044 9.98 6.19 12.826a.666.666 0 10.942.942l2.846-2.853 2.846 2.853a.666.666 0 10.942-.942z\"\n            transform=\"translate(-2.017 -2.018)\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  )\n}\n\nexport default React.memo(Close)","import React from 'react'\n\nconst Info = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n      <g transform=\"translate(-1533 -39)\">\n        <g fill=\"#fff\" transform=\"translate(-.358 -1.639)\">\n          <circle cx=\"1.134\" cy=\"1.134\" r=\"1.134\" transform=\"rotate(180 771.246 22.823)\"></circle>\n          <path\n            d=\"M1 0a1 1 0 00-1 1v5a1 1 0 002 0V1a1 1 0 00-1-1z\"\n            transform=\"rotate(180 771.17 26.882)\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  )\n}\n\nexport default React.memo(Info)","import React from 'react'\n\nconst Warning = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n      <g transform=\"rotate(180 774.5 27.5)\">\n        <g fill=\"#fff\" transform=\"translate(-.358 -1.639)\">\n          <circle cx=\"1.134\" cy=\"1.134\" r=\"1.134\" transform=\"rotate(180 771.246 22.823)\"></circle>\n          <path\n            d=\"M1 0a1 1 0 00-1 1v5a1 1 0 002 0V1a1 1 0 00-1-1z\"\n            transform=\"rotate(180 771.17 26.882)\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  )\n}\n\nexport default React.memo(Warning)","import React, { FC } from 'react'\nimport { Close } from '../Icons'\nimport { Toast as ToastType } from '../../types'\nimport { toastIcon as Icon } from './ToastIcon'\nimport './Toast.css'\n\nexport interface IToast extends ToastType {\n  onClose: (id: string) => void\n}\n\nconst Toast: FC<IToast> = ({\n  id,\n  content,\n  type,\n  config: { backgroundColor, color } = {},\n  onClose,\n}) => {\n  return (\n    <div className={`toast ${type}`} style={{ backgroundColor }}>\n      <div className=\"icon\">{Icon({ type })}</div>\n      <div className=\"content\">\n        <p style={{ color }}>{content}</p>\n      </div>\n      <div className=\"close\" onClick={() => onClose(id)}>\n        <Close />\n      </div>\n    </div>\n  )\n}\n\nexport default Toast","import React from 'react'\nimport { Success, Close, Info, Warning } from '../Icons'\nimport { Type } from '../../types'\n\ninterface IToastIcon {\n  /** Icon type */\n  type: Type\n}\n\nexport const toastIcon = ({ type }: IToastIcon) => {\n  switch (type) {\n    case 'error':\n      return <Close />\n    case 'info':\n      return <Info />\n    case 'warning':\n      return <Warning />\n    default:\n      return <Success />\n  }\n}","import { useReducer } from 'react'\n\nimport { Toast } from '../types'\n\nexport type TAction =\n  | { type: 'ADD'; toast: Toast }\n  | { type: 'REMOVE'; id: string }\n  | { type: 'REMOVE_ALL' }\n\ninterface IState {\n  toasts: Toast[]\n}\n\nconst initialState: IState = {\n  toasts: [],\n}\n\nconst toastReducer = (state: IState, action: TAction): IState => {\n  switch (action.type) {\n    case 'ADD':\n      return {\n        ...state,\n        toasts: [...state.toasts, action.toast],\n      }\n    case 'REMOVE': {\n      return {\n        ...state,\n        toasts: [...state.toasts.filter(toast => toast.id !== action.id)],\n      }\n    }\n    case 'REMOVE_ALL':\n      return {\n        ...state,\n        toasts: [],\n      }\n    default:\n      throw new Error()\n  }\n}\n\nexport const useToast = () => {\n  const [state, dispatch] = useReducer(toastReducer, initialState)\n\n  return { ...state, dispatch }\n}","export enum Events {\n    SHOW = 'show',\n    HIDE = 'hide',\n    HIDE_ALL = 'hideAll',\n}\n\nexport type Type = 'default' | 'success' | 'error' | 'info' | 'warning'\n\nexport type Position =\n    | 'top-left'\n    | 'top-center'\n    | 'top-right'\n    | 'bottom-left'\n    | 'bottom-center'\n    | 'bottom-right'\n\nexport type ToastContent = string\n\nexport type ToastConfig = {\n    backgroundColor?: string\n    color?: string\n}\n\nexport interface Toast {\n    id: string\n    content: ToastContent\n    type: Type\n    config?: ToastConfig\n}\n\nexport interface ToastProvider {\n    content: ToastContent\n    config?: ToastConfig\n}","import { Events } from '../types'\n\n// An event handler will take an event argument\n// and should not return a value\nexport type Handler<T = any> = (event: T) => void\n\ninterface Emitter {\n  on<T = any>(event: Events, handler: Handler<T>): void\n\n  emit<T = any>(event: Events, args?: T): void\n\n  off(): void\n}\n\nexport const emitter = ((): Emitter => {\n  const events = new Map()\n\n  return {\n    /**\n     * Register an event handler for the given event name.\n     * @param {Events} event Type of event to listen for\n     * @param {Handler} callback Handler to call in response to given event\n     */\n    on<T = any>(event: Events, callback: Handler<T>) {\n      if (!events.has(event)) events.set(event, [])\n      events.get(event).push(callback)\n    },\n\n    /**\n     * Invoke all handlers for the given event name.\n     * @param {Events} event The event type to invoke\n     * @param {Any} args Any value passed to each handler\n     */\n    emit<T = any>(event: Events, args: T) {\n      if (!events.has(event)) return\n      events.get(event).forEach((callback: Handler) => callback(args))\n    },\n\n    /** Remove all events. */\n    off() {\n      events.clear()\n    },\n  }\n})()","import { emitter } from './emitter'\nimport { Events, Toast } from '../types'\nimport { TAction } from '../hooks'\n\ninterface IToastDispatcher {\n  dispatch: (value: TAction) => void\n  delay?: number\n}\n\nexport const toastDispatcher = ({ dispatch, delay }: IToastDispatcher) => {\n  emitter.on(Events.SHOW, (toast: Toast) => {\n    dispatch({ type: 'ADD', toast })\n\n    if (delay)\n      setTimeout(() => {\n        dispatch({ type: 'REMOVE', id: toast.id })\n      }, delay)\n  })\n\n  emitter.on(Events.HIDE, (id: string) => dispatch({ type: 'REMOVE', id }))\n\n  emitter.on(Events.HIDE_ALL, () => dispatch({ type: 'REMOVE_ALL' }))\n}","import { emitter, toaster, Toaster } from './utils'\nimport { Events, ToastContent, ToastConfig } from './types'\n\nconst applyToast = ({ ...toast }: Toaster) => emitter.emit(Events.SHOW, toaster({ ...toast }))\n\nconst toast = (content: ToastContent, config?: ToastConfig) =>\n  applyToast({ content, type: 'default', config })\n\ntoast.success = (content: ToastContent, config?: ToastConfig) =>\n  applyToast({ content, type: 'success', config })\n\ntoast.error = (content: ToastContent, config?: ToastConfig) =>\n  applyToast({ content, type: 'error', config })\n\ntoast.info = (content: ToastContent, config?: ToastConfig) =>\n  applyToast({ content, type: 'info', config })\n\ntoast.warn = (content: ToastContent, config?: ToastConfig) =>\n  applyToast({ content, type: 'warning', config })\n\ntoast.hideAll = () => emitter.emit(Events.HIDE_ALL)\n\nexport { toast }","import { Type, ToastProvider, Toast } from '../types'\n\nexport interface Toaster extends ToastProvider {\n  type: Type\n}\n\nexport const toaster = ({ content, type, config }: Toaster): Toast => {\n  return {\n    id: Math.random()\n      .toString(36)\n      .substr(2, 10),\n    content,\n    type,\n    config,\n  }\n}","import React, { FC, useCallback, useEffect } from 'react';\nimport { Toast } from './components';\nimport { useToast } from './hooks';\nimport { emitter, toastDispatcher } from './utils';\nimport { Events, Position } from './types';\nimport './ToastContainer.css';\n\ninterface IToastContainer {\n  position?: Position\n  delay?: number\n}\n\nconst ToastContainer: FC<IToastContainer> = ({ position = 'bottom-left', delay }) => {\n  const { toasts, dispatch } = useToast()\n\n  useEffect(() => {\n    toastDispatcher({ dispatch, delay })\n\n    return () => {\n      emitter.off()\n    }\n  }, [dispatch, delay])\n\n  const onClose = useCallback((id: string) => {\n    emitter.emit(Events.HIDE, id)\n  }, [])\n\n  return (\n    <div className={`toastContainer ${position}`}>\n      {toasts.map(toast => (\n        <Toast key={toast.id} {...toast} onClose={onClose} />\n      ))}\n    </div>\n  )\n}\n\nexport default ToastContainer"],"names":["Success","React","xmlns","width","height","viewBox","transform","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","memo","Close","Info","cx","cy","r","Warning","Toast","_ref","id","content","type","_ref$config","config","_ref$config2","color","onClose","className","style","backgroundColor","Icon","onClick","Events","initialState","toasts","toastReducer","state","action","_extends","concat","toast","filter","Error","emitter","events","Map","on","event","callback","has","set","get","push","emit","args","forEach","off","clear","applyToast","_objectDestructuringEmpty","SHOW","Math","random","toString","substr","toaster","success","error","info","warn","hideAll","HIDE_ALL","_useReducer","position","_ref$position","delay","_useToast","useReducer","dispatch","useEffect","setTimeout","HIDE","toastDispatcher","useCallback","map","key"],"mappings":"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"}